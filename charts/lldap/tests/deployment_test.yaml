suite: deployment test suite
templates:
  - deployment.yaml
tests:
  - it: should generate a deployment
    release:
      name: myrelease
    values: 
      - ./values/values-test-deployment.yaml
    asserts:
      - containsDocument:
          kind: Deployment
          apiVersion: apps/v1
          name: "myrelease-lldap"
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: "lldap"
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: "myrelease"
      - equal:
          path: metadata.labels["app.kubernetes.io/version"]
          value: "v0.5.0"
      - equal:
          path: metadata.annotations.myDAnnotation
          value: myDValue
      - equal:
          path: metadata.labels.myDLabel
          value: myDValue
      - contains:
          path: spec.template.spec.containers
          content:
            name: lldap
          any: true
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: ldap
            protocol: TCP
            containerPort: 3890
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: web
            protocol: TCP
            containerPort: 17170
  - it: should generate a daemonset
    release:
      name: myrelease
    values: 
      - ./values/values-test-daemonset.yaml
    asserts:
      - containsDocument:
          kind: DaemonSet
          apiVersion: apps/v1
          name: "myrelease-lldap"
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: "lldap"
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: "myrelease"
      - equal:
          path: metadata.labels["app.kubernetes.io/version"]
          value: "v0.5.0"
      - equal:
          path: metadata.annotations.myDAnnotation
          value: myDValue
      - equal:
          path: metadata.labels.myDLabel
          value: myDValue
      - contains:
          path: spec.template.spec.containers
          content:
            name: lldap
          any: true
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: ldap
            protocol: TCP
            containerPort: 3890
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: web
            protocol: TCP
            containerPort: 17170
  - it: should generate a statefulset
    release:
      name: myrelease
    values: 
      - ./values/values-test-statefulset.yaml
    asserts:
      - containsDocument:
          kind: StatefulSet
          apiVersion: apps/v1
          name: "myrelease-lldap"
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: "lldap"
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: "myrelease"
      - equal:
          path: metadata.labels["app.kubernetes.io/version"]
          value: "v0.5.0"
      - equal:
          path: metadata.annotations.myDAnnotation
          value: myDValue
      - equal:
          path: metadata.labels.myDLabel
          value: myDValue
      - contains:
          path: spec.template.spec.containers
          content:
            name: lldap
          any: true
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: ldap
            protocol: TCP
            containerPort: 3890
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: web
            protocol: TCP
            containerPort: 17170
  - it: should have the data volume
    asserts:
      - contains:
          path: spec.template.spec.containers
          content:
            name: lldap
          any: true
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: ldap
            protocol: TCP
            containerPort: 3890
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: lldap-data
            mountPath: /data
      - contains:
          path: spec.template.spec.volumes
          content:
            name: lldap-data
          any: true
  - it: should have the generated configMap mounted as file
    release:
      name: myrelease
    set:
      configMap:
        enabled: true
        mountAsFile: true
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: lldap-data
            configMap:
              name: myrelease-lldap-cm
          any: true          
  - it: should have the existing configMap mounted as file
    set:
      configMap:
        enabled: true
        mountAsFile: true
        existingConfigMap: existingMap
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: lldap-data
            configMap:
              name: existingMap
          any: true
  - it: should have the generated secret as env
    release:
      name: myrelease
    set:
      secret:
        existingSecret: ""
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: myrelease-lldap-secret
  - it: should have the existing secret as env
    release:
      name: myrelease
    set:
      secret:
        existingSecret: existingSecret
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: existingSecret
  - it: should have the cert secret mounted
    release:
      name: myrelease
    set:
      ldaps:
        enabled: true
        existingSecret: cert-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: certs
            mountPath: /certs
      - contains:
          path: spec.template.spec.volumes
          content:
            name: certs
            secret:
              secretName: cert-secret
              items:
              - key: cert
                path: /certs/cert.pem
              - key: key
                path: /certs/key.pem
          any: true