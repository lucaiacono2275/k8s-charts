{{ range .Values.projects }}
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: {{ .name }}
  namespace: argocd
spec:
  sourceRepos:
  {{- range .sourceRepos }}
  - {{ . | quote}}
  {{- end }}
  destinations:
  {{- range .destinations }}
  - namespace: {{ .namespace | quote }}
    server: {{ .server | quote }}
  {{- end }}
  clusterResourceWhitelist:
  {{- range .clusterResourceWhitelist }}
  - group: {{ .group | quote }}
    kind: {{ .kind | quote }}
  {{- end }}  
---
{{ $project := .name }}
{{ $repoURL := .applications.repoURL }}
{{ $targetRevision := .applications.targetRevision }}
{{ $appPath := .applications.path }}
{{ $server := .applications.server }}
{{- range .deploy }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ print $project "-" .name }}
  # You'll usually want to add your resources to the argocd namespace.
  namespace: argocd
  # Add this finalizer ONLY if you want these to cascade delete.
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  # Add labels to your application object.
  labels:
    name: {{ .labelName | default .name }}
spec:
  # The project the application belongs to.
  project: {{ $project }}

  # Source of the application manifests
  source:
    repoURL: {{ $repoURL }}
    targetRevision: {{ $targetRevision }} # For Helm, this refers to the chart version.
    path: "{{ $appPath }}/{{ .path | default .name }}"  # This has no meaning for Helm charts pulled directly from a Helm repo instead of git.
{{- if not .skipPlugin }}
    # plugin specific config
    plugin:
      # Only set the plugin name if the plugin is defined in argocd-cm.
      # If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the
      # Application according to the plugin's discovery rules.
      #name: helmfile
      # environment variables passed to the plugin
      env:
       - name: HELMFILE_GLOBAL_OPTIONS # pass-through options for all helmfile operations helmfile --help
         value: "-e {{ $project }}" 
      #  - HELMFILE_TEMPLATE_OPTIONS: # pass-through options for the templating operation helmfile template --help
      #  - name: FOO
      #    value: bar
{{- end }}
  # Destination cluster and namespace to deploy the application
  destination:
    server: {{ $server }}
    # The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
    namespace: {{ .namespace | default .name }}

  # Sync policy
  syncPolicy:
    # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
    # automated: 
    #   prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
    #   selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
  #     allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
{{- if .syncPolicy }}
{{- if .syncPolicy.automated.enabled }}
    automated: 
      prune: {{ .syncPolicy.automated.prune }}
      selfHeal: {{ .syncPolicy.automated.selfHeal }}
{{- end }}
{{- end }}
    syncOptions:     # Sync options which modifies sync behavior
  #  - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
  #  - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
  #  - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
  #  managedNamespaceMetadata: # Sets the metadata for the application namespace. Only valid if CreateNamespace=true (see above), otherwise it's a no-op.
  #    labels: # The labels to set on the application namespace
  #      any: label
  #      you: like
  #    annotations: # The annotations to set on the application namespace
  #      the: same
  #      applies: for
  #      annotations: on-the-namespace

    # The retry feature is available since v1.7
    # retry:
    #  limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
    #  backoff:
    #    duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
    #    factor: 2 # a factor to multiply the base duration after each failed retry
    #    maxDuration: 3m # the maximum amount of time allowed for the backoff strategy

  # Will ignore differences between live and desired states during the diff. Note that these configurations are not
  # used during the sync process.
  # ignoreDifferences:
  # for the specified json pointers
  # - group: apps
  #   kind: Deployment
  #   jsonPointers:
  #   - /spec/replicas
  # for the specified managedFields managers
  # - group: "*"
  #   kind: "*"
  #   managedFieldsManagers:
  #   - kube-controller-manager

  # RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for
  # informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional
  # circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the
  # space used to store the history, so we do not recommend increasing it.
  # revisionHistoryLimit: 10
---
{{- end }}
{{- end }}